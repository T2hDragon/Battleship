@page
@using System.Data
@using Domain.Enums
@using GameBrain
@model WebApp.Pages.GameCreation.PlaceBoats

@{
    ViewData["Title"] = "Boat placement";
}

@functions
{
    string GetCellContent(Player player, (int x, int y) location, bool boatsHidden)
    {
        var hasBoatInLocation = player.HasBoatInLocation(location);
        var hasPlacementBoatInLocation = player.BoatBeingPlaced != null &&
                                         player.BoatBeingPlaced.GetCellLocations()
                                             .Contains(location);
        var eCellState = player.PlayerBoard.GetCellState(location);
        var cellString = eCellState switch
        {
            ECellState.Empty => "&nbsp;",
            ECellState.Hit => "X",
            ECellState.Miss => "O",
            _ => throw new InvalidExpressionException($"Asked unknown cellState: {eCellState}")
            };
        if (player.HasBoatSunkInLocation(location))
        {
            Console.ForegroundColor = ConsoleColor.Magenta;
            cellString = "#";
        }
        else if (player.IsLocationLocked(location, Model.BattleShip.GetBoatsCanTouch()))
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            cellString = "*";
        }
    //Modify CellState presentation based on ship locations and game rules
        else if (!boatsHidden && (hasBoatInLocation || hasPlacementBoatInLocation) && eCellState == ECellState.Empty)
        {
            var possibleBoat = hasBoatInLocation
                ? player.Boats.First(boat => boat.GetCellLocations().Contains(location))
                : player.GetBoatBeingPlaced();
            var index = possibleBoat.GetCellLocations().IndexOf(location);
            cellString = index == 0 ? "<" : index != possibleBoat.GetCellLocations().Count() - 1 ? "S" : ">";
        }
        return cellString;
    }

    string GetTDClass(string cellString)
    {
        var result = " font-weight-bold .col m-0 bg-primary";
        switch (cellString)
        {
            case "&nbsp;":
                break;
            case "#":
                result = $"{result} .text-warning";
                break;
            case "X":
                result = $"{result} .text-danger";
                break;
            case "*":
                result = $"{result} .text-secondary";
                break;
            case "S":
                result = $"{result} .text-success";
                break;
            case "<":
                result = $"{result} .text-success";
                break;
            case ">":
                result = $"{result} .text-success";
                break;
            case "O":
                result = $"{result} .text-warning";
                break;
            default:
                throw new InvalidOperationException($"Unknown cell string:\"{cellString}\"");
        }

        return result;
    }
}

<div class="row">
    <div class="col-4">
        <table>
            <tr>
                <td>
                    <a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="up-left" asp-route-vertical="@Model.Vertical">↖️</a>
                </td>
                <td>
                    <a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="up" asp-route-vertical="@Model.Vertical">⬆️</a>
                </td>
                <td><a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="up-right" asp-route-vertical="@Model.Vertical">↗️</a>️</td>
            </tr>
            <tr>
                <td><a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="left" asp-route-vertical="@Model.Vertical">⬅️</a>️</td>
                <td><a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="rotate" asp-route-vertical="@Model.Vertical">🔄</a>️</td>
                <td><a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="right" asp-route-vertical="@Model.Vertical">➡️</a>️</td>
            </tr>
            <tr>
                <td><a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="down-left" asp-route-vertical="@Model.Vertical">↙️</a>️</td>
                <td><a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="down" asp-route-vertical="@Model.Vertical">⬇️</a>️</td>
                <td><a asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-dir="down-right" asp-route-vertical="@Model.Vertical">↘️</a>️</td>
            </tr>
            <tr>
                <td colspan="3">
                    <a asp-page-handler="PlaceBoat" asp-route-gameId="@Model.Game?.GameId" asp-route-boardId="@Model.Player.PlayerBoard.GameBoardId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY" asp-route-vertical="@Model.Vertical">🆗️</a>
                </td>
            </tr>
        </table>

    </div>
    <div class="col text-center">
        <table class="table-bordered">
            @for (var y = 0; y <= Model.Height; y++)
            {
                <tr class="m-0">
                    @for (var x = 0; x <= Model.Width; x++)
                    {
                        if (x == 0 || y == 0)
                        {
                            if (x == y)
                            {
                                <td>@Html.Raw("&nbsp;")</td>
                            }
                            else if (x == 0)
                            {
                                <td>@(y - 1)</td>
                            }
                            else if (y == 0)
                            {
                                <td>@Model.Alphabet[x - 1]</td>
                            }
                        }
                        else
                        {
                            var cellString = GetCellContent(Model.Player, (x - 1, y - 1), false);
                            <td class="@GetTDClass(cellString) game-cell">@Html.Raw(cellString)</td>
                        }
                    }
                </tr>
            }
        </table>
    </div>
</div>